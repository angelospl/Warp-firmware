Filter : module ()
{
        N : const 20;
        delayLow : const 6;
        lenLow : const 13;
        lowPassFilterOrder183 : function (input : array [20] of float32)
        				-> (output : array [20] of float32);
        getXAccelerationMeasurement : function (nil) -> (ret : int16);
	noisyWarpPrintFloat32 : function (x : float32) -> (nil);
        lowPassFilter : function (nil) -> (nil);
}

# Implementation of a filter using normal functions
lowPassFilterOrder183 : function (input : array [20] of float32) -> (output : array [20] of float32) =
{
	# Initialize coefficient values
    coeffLow := array of { float32 0.000220, 0.000580, 0.001199, 0.002057,
    0.003064, 0.004039, 0.004736, 0.004906, 0.004369, 0.003091, 0.001230,
    -0.000873, -0.002771};

	ext_sig_low : array [26] of float32;
	y_low_ext : array [26] of float32;
	sig_filt : array [26] of float32;
	outputArr : array [20] of float32;

	i : int32;
	sequence(i = 0; i < (N + delayLow); i += 1)
	{
		ext_sig_low[i] = input[i];
	};

	sequence(i = N; i < (N + delayLow); i += 1)
	{
		ext_sig_low[i] = 0.0;
	};

	n : int32;
	sequence(n = 0; n < (N + delayLow); n += 1)
	{
		y_low_ext[n] = 0.0;
		sequence(i = 0; i < lenLow; i += 1)
		{
			matchseq
			{
				n - i >= 0 =>
				{
						y_low_ext[n] += coeffLow[i] * ext_sig_low[n - i];
				}
			};
		};
	};

	sequence(i = delayLow; i < (delayLow + N); i += 1)
	{
		sig_filt[i - delayLow] = y_low_ext[i];
	};

	sequence(i = 0; i < N; i += 1)
	{
		outputArr[i] = sig_filt[i];
	};

	return (output : outputArr);
}


lowPassFilter : function (nil) -> (nil) =
{
	i : int32;
	inputArr : array [20] of float32;


	sequence(i = 0; i < N; i += 1)
	{
		inputArr[i] =  float32 getXAccelerationMeasurement();
	};
        
	outputArr := lowPassFilterOrder183(input : inputArr);

	sequence(i = 0; i < N; i += 1)
	{
		nil = noisyWarpPrintFloat32(x : outputArr[i]);
	};
	
}