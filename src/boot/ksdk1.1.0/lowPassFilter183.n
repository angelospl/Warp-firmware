Filter : module ()
{
        N : const 5000;
        delayLow : const 91;
        lenLow : const 183;
        lowPassFilterOrder183 : function (input : array [5000] of float32)
        				-> (output : array [5000] of float32);
        getXAccelerationMeasurement : function (nil) -> (ret : int16);
	noisyWarpPrintFloat32 : function (x : float32) -> (nil);
        lowPassFilter : function (nil) -> (nil);
}

# Implementation of a filter using normal functions
lowPassFilterOrder183 : function (input : array [5000] of float32) -> (output : array [5000] of float32) =
{
	# Initialize coefficient values
    coeffLow := array of { float32 0.000220, 0.000580, 0.001199, 0.002057,
    0.003064, 0.004039, 0.004736, 0.004906, 0.004369, 0.003091, 0.001230,
    -0.000873, -0.002771, -0.004021, -0.004324, -0.003634, -0.002187,
    -0.000455, 0.000996, 0.001688, 0.001391, 0.000217, -0.001410, -0.002888,
    -0.003654, -0.003390, -0.002154, -0.000378, 0.001280, 0.002174, 0.001923,
    0.000571, -0.001402, -0.003245, -0.004210, -0.003854, -0.002229, 0.000103,
    0.002260, 0.003370, 0.002923, 0.000994, -0.001739, -0.004229, -0.005449,
    -0.004811, -0.002434, 0.000856, 0.003802, 0.005190, 0.004345, 0.001442,
    -0.002498, -0.005955, -0.007486, -0.006312, -0.002689, 0.002116, 0.006248,
    0.007973, 0.006386, 0.001847, -0.004052, -0.009025, -0.010952, -0.008757,
    -0.002936, 0.004490, 0.010644, 0.012868, 0.009822, 0.002167, -0.007485,
    -0.015398, -0.018080, -0.013720, -0.003126, 0.010240, 0.021267, 0.024964,
    0.018440, 0.002373, -0.018608, -0.036909, -0.044107, -0.033650, -0.003231,
    0.043933, 0.099453, 0.151723, 0.188960, 0.202443, 0.188960, 0.151723,
    0.099453, 0.043933, -0.003231, -0.033650, -0.044107, -0.036909, -0.018608,
    0.002373, 0.018440, 0.024964, 0.021267, 0.010240, -0.003126, -0.013720,
    -0.018080, -0.015398, -0.007485, 0.002167, 0.009822, 0.012868, 0.010644,
    0.004490, -0.002936, -0.008757, -0.010952, -0.009025, -0.004052, 0.001847,
    0.006386, 0.007973, 0.006248, 0.002116, -0.002689, -0.006312, -0.007486,
    -0.005955, -0.002498, 0.001442, 0.004345, 0.005190, 0.003802, 0.000856,
    -0.002434, -0.004811, -0.005449, -0.004229, -0.001739, 0.000994, 0.002923,
    0.003370, 0.002260, 0.000103, -0.002229, -0.003854, -0.004210, -0.003245,
    -0.001402, 0.000571, 0.001923, 0.002174, 0.001280, -0.000378, -0.002154,
    -0.003390, -0.003654, -0.002888, -0.001410, 0.000217, 0.001391, 0.001688,
    0.000996, -0.000455, -0.002187, -0.003634, -0.004324, -0.004021, -0.002771,
	-0.000873, 0.001230, 0.003091, 0.004369, 0.004906, 0.004736, 0.004039,
    0.003064, 0.002057, 0.001199, 0.000580, 0.000220 };

	ext_sig_low : array [5091] of float32;
	y_low_ext : array [5091] of float32;
	sig_filt : array [5091] of float32;
	outputArr : array [5000] of float32;

	i : int32;
	sequence(i = 0; i < (N + delayLow); i += 1)
	{
		ext_sig_low[i] = input[i];
	};

	sequence(i = N; i < (N + delayLow); i += 1)
	{
		ext_sig_low[i] = 0.0;
	};

	n : int32;
	sequence(n = 0; n < (N + delayLow); n += 1)
	{
		y_low_ext[n] = 0.0;
		sequence(i = 0; i < lenLow; i += 1)
		{
			matchseq
			{
				n - i >= 0 =>
				{
						y_low_ext[n] += coeffLow[i] * ext_sig_low[n - i];
				}
			};
		};
	};

	sequence(i = delayLow; i < (delayLow + N); i += 1)
	{
		sig_filt[i - delayLow] = y_low_ext[i];
	};

	sequence(i = 0; i < N; i += 1)
	{
		outputArr[i] = sig_filt[i];
	};

	return (output : outputArr);
}


lowPassFilter : function (nil) -> (nil) =
{
	i : int32;
	inputArr : array [5000] of float32;


	sequence(i = 0; i < N; i += 1)
	{
		inputArr[i] =  float32 getXAccelerationMeasurement();
	};
        
	outputArr := lowPassFilterOrder183(input : inputArr);

	sequence(i = 0; i < N; i += 1)
	{
		nil = noisyWarpPrintFloat32(x : outputArr[i]);
	};
	
}