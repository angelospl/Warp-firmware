Filter : module ()
{
        N : const 10;
        M : const 20;
        lowPassFilterOrder61 : function (input : array [10] of float32)
        				-> (output : array [10] of float32);
	getXAccelerationMeasurement : function (nil) -> (ret : int16);
	noisyWarpPrintFloat32 : function (x : float32) -> (nil);
        lowPassFilter: function (nil) -> (nil);
}

# Implementation of a filter using channels and coroutines
lowPassFilterOrder61 : function (input : array [10] of float32)
					-> (output : array [10] of float32) =
{
	# Initialize coefficient values
	coeff := array of { float32 0.000227909254804652, 0.000433867017147087, 0.000780047144163945,
	0.001226644358132, 0.00173493436088177};
	
	# Initialize all array values to 0
	# Window is saved in the coroutine stack frame and therefore can
	# be stored as long as the coroutine is alive.
    window := array [3] of {float32 0.0, * => 0.0};

    y : array [10] of float32;
    x : array [10] of float32;

    acc1, acc2 : float32;

    i : int32;

    iterate
    {
        true =>
        {
			x = <- input;
			# Consume delay line and beginning of input samples
			sequence(i = 0; i < 4; i += 1)
			{
				acc1 = 0.0;
				sequence(j := int32 0; j < (i + 1); j += 1)
				{
					acc2 = x[i-j] * coeff[j];
					acc1 += acc2;
				};

				sequence(j = 0; j < (4 - i); j += 1)
				{
					acc2 = window[j] * coeff[i + j + 1];
					acc1 += acc2;
				};

				y[i] = acc1;
			};
                
			# Consume remaining input samples
			sequence(i = 0; i < (N - 4); i += 1)
			{
				acc1 = 0.0;
				sequence(j := int32 0; j < 5; j += 1)
				{
					acc2 = x[i-j + 4] * coeff[j];
					acc1 += acc2;
				};

				y[i + 4]= acc1;
			};

			# Update delay line for next frame
			sequence(i = 0; i < 4; i += 1)
			{
				window[3-i] = x[i + N - 4];
			};

			output <-= y;
		}
	};
}

lowPassFilter : function (nil) -> (nil) =
{
	i,k : int32;
	inputArr : array [10] of float32;


	firChan := load Filter->lowPassFilterOrder61 (path Filter);
        
	sequence(k = 0; k < M; k += N)
	{
		sequence(i = 0; i < N; i += 1)
		{
			inputArr[i] = float32 getXAccelerationMeasurement();
		};

		# Feed inputArr to fir implementation coroutine (write to channel)
		firChan <-= inputArr;

		# Take result from the output channel of the coroutine
		outputArr := <-firChan;

		sequence(i = 0; i < N; i += 1)
		{
			nil = noisyWarpPrintFloat32(x : outputArr[i]);
		};
	};
}
